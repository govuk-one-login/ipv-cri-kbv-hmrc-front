AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary components to deploy HMRC KBV CRI Frontend onto ECS
  Fargate within an existing VPC and private subnets (imported parameters).
  HMRC KBV Front can be invoked via the public API Gateway on the url in the
  FrontUrl output.

  The ingress route in summary is: API Gateway -> VPC link -> Private ALB ->
  HMRC KBV Front ECS Service

  HMRC KBV Front egress to HMRC KBV API Gateway is via a NAT Gateway which
  should have a route in the provided private subnets' route table.

Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(integration)|(staging)|(build)|(dev))
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  DeploymentStrategy:
    Description: "Predefined deployment configuration for ECS application"
    Type: String
    Default: "None"
  LogGroupRetentionInDays:
    Description: "Retention for all log groups"
    Type: Number
    Default: "30"

Conditions:
  IsNotDevelopment: !Or
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]
  IsProduction: !Equals [!Ref Environment, production]
  IsPerformance: !Or
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, production]
  UsePermissionsBoundary: !Not
    - !Equals [!Ref PermissionsBoundary, "none"]
  UseCodeSigning: !Not
    - !Equals [!Ref CodeSigningConfigArn, "none"]
  UseCanaryDeployment: !Not
    - !Equals [!Ref DeploymentStrategy, "None"]

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      ga4Disabled: "false"
      uaDisabled: "false"
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      ga4Disabled: "false"
      uaDisabled: "false"
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      ga4Disabled: "false"
      uaDisabled: "false"
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      ga4Disabled: "true"
      uaDisabled: "false"
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
      ga4Disabled: "true"
      uaDisabled: "false"
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

Resources:
  # Security Groups for the ECS service and load balancer
  LoadBalancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        KBV HMRC Front LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  LoadBalancerSGEgressToECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt LoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the KBV HMRC Front load balancer and
        the KBV HMRC Front ECS security group
      DestinationSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080

  ECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        KBV HMRC Front ECS Security Group permitting outbound
        to anywhere.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  ECSSecurityGroupIngressFromLoadBalancer:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: >-
        KBV HMRC Front ECS permits inbound from the KBV Front
        load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt ECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId

  AccessLogsBucket:
    Condition: IsNotDevelopment
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Environment}-access-logs
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  AccessLogsBucketPolicy:
    Condition: IsNotDevelopment
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId:
                    !FindInMap [
                      ElasticLoadBalancerAccountIds,
                      !Ref AWS::Region,
                      AccountId,
                    ]
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${AccessLogsBucket}/${AWS::StackName}-${Environment}/AWSLogs/${AWS::AccountId}/*

  # Private Application Load Balancer
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
      Type: application
      LoadBalancerAttributes: !If
        - IsNotDevelopment
        - - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value: !Ref AccessLogsBucket
          - Key: access_logs.s3.prefix
            Value: !Sub ${AWS::StackName}-${Environment}
        - !Ref AWS::NoValue

  LoadBalancerListenerTargetGroupECS:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  LoadBalancerListenerGreenTargetGroupECS:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      Matcher:
        HttpCode: 200
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
    # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS cluster, service and task definition
  EcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "KBV HMRC CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  EcsService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref EcsCluster
      DeploymentConfiguration: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - MaximumPercent: 200
          MinimumHealthyPercent: 50
          DeploymentCircuitBreaker:
            Enable: TRUE
            Rollback: TRUE
      DeploymentController:
        Type: !If
          - UseCanaryDeployment
          - CODE_DEPLOY
          - ECS
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - 60
      LaunchType: FARGATE
      LoadBalancers: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - - ContainerName: app
            ContainerPort: 8080
            TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
      NetworkConfiguration: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - !GetAtt ECSSecurityGroup.GroupId
            Subnets:
              - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
              - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
      TaskDefinition: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - !Ref ECSServiceTaskDefinition

      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECS"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "KBV HMRC CRI"
        - Key: Environment
          Value: !Sub "${Environment}"
    DependsOn:
      - LoadBalancerListener

  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/ecs/${AWS::StackName}-Front-ECS
      RetentionInDays: !Ref LogGroupRetentionInDays

  ECSAccessLogsGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref ECSAccessLogsGroup

  ECSServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: CONTAINER-IMAGE-PLACEHOLDER
          Name: app
          Environment:
            - Name: API_BASE_URL
              Value: !Sub
                - "https://${APIGatewayId}-${VpceId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
                - APIGatewayId:
                    Fn::ImportValue: kbv-hmrc-cri-api-PrivateApiGatewayId
                  VpceId:
                    Fn::ImportValue: cri-vpc-ExecuteApiGatewayEndpointId
                  Environment: !Ref Environment
            - Name: EXTERNAL_WEBSITE_HOST
              Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
            - Name: SESSION_TABLE_NAME
              Value: !Sub
                - "${AWS::StackName}-sessions-${Environment}"
                - Environment: !Ref Environment
            - Name: UA_CONTAINER_ID
              Value: !If [IsProduction, "GTM-TT5HDKV", "GTM-TK92W68"]
            - Name: GA4_CONTAINER_ID
              Value: !If [IsProduction, "GTM-K4PBJH3", "GTM-KD86CMZ"]
            - Name: UA_DISABLED
              Value:
                !FindInMap [
                  EnvironmentConfiguration,
                  !Ref "Environment",
                  uaDisabled,
                ]
            - Name: GA4_DISABLED
              Value:
                !FindInMap [
                  EnvironmentConfiguration,
                  !Ref "Environment",
                  ga4Disabled,
                ]
            - Name: ANALYTICS_COOKIE_DOMAIN
              Value:
                !If [
                  IsProduction,
                  "account.gov.uk",
                  !Sub "${Environment}.account.gov.uk",
                ]
            - Name: LANGUAGE_TOGGLE_DISABLED
              Value: false
          Secrets:
            - Name: DT_TENANT
              ValueFrom: !Join
                - ""
                - - !FindInMap [
                      EnvironmentConfiguration,
                      !Ref Environment,
                      dynatraceSecretArn,
                    ]
                  - ":DT_TENANT::"
            - Name: DT_TENANTTOKEN
              ValueFrom: !Join
                - ""
                - - !FindInMap [
                      EnvironmentConfiguration,
                      !Ref Environment,
                      dynatraceSecretArn,
                    ]
                  - ":DT_TENANTTOKEN::"
            - Name: DT_CONNECTION_POINT
              ValueFrom: !Join
                - ""
                - - !FindInMap [
                      EnvironmentConfiguration,
                      !Ref Environment,
                      dynatraceSecretArn,
                    ]
                  - ":DT_CONNECTION_POINT::"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSAccessLogsGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub ${AWS::StackName}-${Environment}
      Cpu: "256"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "KBV HMRC CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullFrontImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: DynamoDBSessionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt SessionsTable.Arn
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSCanaryDeploymentStack:
    Type: AWS::CloudFormation::Stack
    Condition: UseCanaryDeployment
    Properties:
      TemplateURL: https://template-storage-templatebucket-1upzyw6v9cs42.s3.eu-west-2.amazonaws.com/ecs-canary-deployment/template.yaml?versionId=5RRU1nfKQD_d08FKttr8W7pzrAsqQiUM # v2.1.1
      Parameters:
        CloudWatchAlarms: !Sub
          - "${MyAlarmOneVar},${MyAlarmTwoVar}"
          - MyAlarmOneVar: !Ref 5XXOnELB
            MyAlarmTwoVar: !Ref FrontTargetGroup5xxPercentErrors
        CodeSigningConfigArn: !If
          - UseCodeSigning
          - !Ref CodeSigningConfigArn
          - !Ref AWS::NoValue
        ContainerName: "app"
        ContainerPort: "8080"
        DeploymentStrategy: !Ref DeploymentStrategy
        ECSClusterName: !Ref EcsCluster
        ECSServiceName: !GetAtt EcsService.Name
        ECSServiceTaskDefinition: !Ref ECSServiceTaskDefinition
        GreenTargetGroupName: !GetAtt LoadBalancerListenerGreenTargetGroupECS.TargetGroupName
        LoadBalancerListenerARN: !Ref LoadBalancerListener
        PermissionsBoundary: !If
          - UsePermissionsBoundary
          - Fn::ImportValue: !Sub "${AWS::StackName}-ECSCanaryPermissionsBoundaryArn"
          - AWS::NoValue
        SecurityGroups: !GetAtt ECSSecurityGroup.GroupId
        Subnets: !Join
          - ","
          - - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
        TargetGroupName: !GetAtt LoadBalancerListenerTargetGroupECS.TargetGroupName
        VpcId: !Sub ${VpcStackName}-VpcId

  # Create the VPC Link to join the API Gateway to the
  # private Load Balancer in front of Passport Front ECS
  # Service.
  VpcLink:
    Type: "AWS::ApiGatewayV2::VpcLink"
    Properties:
      Name: ApiGwVpcLinkToLoadBalancer
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
      SecurityGroupIds: []
  ApiGwHttpEndpoint:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Sub ${AWS::StackName}-${Environment}
      ProtocolType: HTTP

  ApiGwHttpEndpointIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref LoadBalancerListener
      PayloadFormatVersion: "1.0"

  APIGWRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      RouteKey: "ANY /{proxy+}"
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGwHttpEndpointIntegration

  APIStageDefault:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength",
          "responseLatency":"$context.responseLatency"
          }

  APIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/apigateway/${AWS::StackName}-API-GW-AccessLogs
      RetentionInDays: !Ref LogGroupRetentionInDays

  APIGWAccessLogsGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref APIGWAccessLogsGroup

  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "${AWS::StackName}-sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  # ECS Autoscaling
  ECSAutoScalingTarget:
    Condition: IsPerformance
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1
      MinCapacity: 1
      ResourceId: !Join
        - "/"
        - - "service"
          - !Ref EcsCluster
          - !GetAtt EcsService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  EcsStepScaleOutPolicy:
    Condition: IsPerformance
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsStepScalingOutPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - "/"
        - - "service"
          - !Ref EcsCluster
          - !GetAtt EcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown:
          180 # The policy will continue to respond to additional alarm breaches,
          # even while a scaling activity is in progress. This means Application
          # Auto Scaling will evaluate all alarm breaches as they occur.
          # A cooldown period is used to protect against over-scaling due to
          # multiple alarm breaches occurring in rapid succession.
        MinAdjustmentMagnitude: 1
        StepAdjustments:
          - MetricIntervalUpperBound: 0 # 60%
            ScalingAdjustment: 100 # Scale by 100% of containers if the metric is breached
            # with <60% utilisation
          - MetricIntervalLowerBound: 0 # 60%
            MetricIntervalUpperBound: 30 # 90%
            ScalingAdjustment: 200 # Scale by 200% of containers if the metric is breached
            # with 80-90% utilisation
          - MetricIntervalLowerBound: 30 # 90%
            MetricIntervalUpperBound: 35 # 95%
            ScalingAdjustment: 300 # Scale by 300% of containers if the metric is breached
            # with 90-95% utilisation
          - MetricIntervalLowerBound: 35 # 95%
            ScalingAdjustment:
              500 # Scale by 500% of containers if the metric is breached
              # with >95% utilisation
              # Note: CPU can scale greater than 100% in a burst mode
            # on Fargate, so leave the upper bound open

  EcsStepScaleInPolicy:
    Condition: IsPerformance
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsStepScalingInPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - "/"
        - - "service"
          - !Ref EcsCluster
          - !GetAtt EcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown:
          180 # The policy will continue to respond to additional alarm breaches,
          # even while a scaling activity is in progress. This means Application
          # Auto Scaling will evaluate all alarm breaches as they occur.
          # A cooldown period is used to protect against under-scaling due to
          # multiple alarm breaches occurring in rapid succession.
        StepAdjustments:
          - MetricIntervalUpperBound: -15 # 5%
            ScalingAdjustment: -90 # Scale down by 90% of containers if the metric is breached
            # with <5% utilisation
          - MetricIntervalLowerBound: -15 # 5%
            MetricIntervalUpperBound: 0 # 20%
            ScalingAdjustment:
              -50 # Scale down 50% of containers if the metric is breached
              # with <20% utilisation

  EcsStepScaleOutAlarm:
    Condition: IsPerformance
    DependsOn: ECSAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref EcsStepScaleOutPolicy
      AlarmDescription: "EcsClusterOver60PercentCPU"
      ComparisonOperator: "GreaterThanThreshold"
      DatapointsToAlarm: "1"
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
      Unit: "Percent"
      EvaluationPeriods: "1"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "60"

  EcsStepScaleInAlarm:
    Condition: IsPerformance
    DependsOn: ECSAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref EcsStepScaleInPolicy
      AlarmDescription: "EcsClusterUnder60PercentCPU"
      ComparisonOperator: "LessThanThreshold"
      DatapointsToAlarm: "5"
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
      Unit: "Percent"
      EvaluationPeriods: "5"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "20"

  NoTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub KBV HMRC ${Environment} frontend no ECS service tasks
      ActionsEnabled: false
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
      OKActions: []
      InsufficientDataActions: []
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
      Period: 60
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  OnlyOneTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub KBV ${Environment} frontend below desired ECS service tasks
      ActionsEnabled: false
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
      OKActions: []
      InsufficientDataActions: []
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
      Period: 300
      EvaluationPeriods: 3
      DatapointsToAlarm: 3
      Threshold: 2
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  5XXOnELB:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub KBV HRMC ${Environment} frontend 5XX count
      ActionsEnabled: false
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
      OKActions: []
      InsufficientDataActions: []
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Dimensions:
        - Name: TargetGroup
          Value: !Ref LoadBalancerListenerTargetGroupECS
        - Name: LoadBalancer
          Value: !Ref LoadBalancer
      Period: 60
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  FrontTargetGroup5xxPercentErrors:
    Type: AWS::CloudWatch::Alarm
    # Condition: UseCanaryDeployment
    Properties:
      AlarmName: FrontTargetGroup5xxPercentAlarm
      AlarmDescription: >
        The number of HTTP 5XX server error codes that originate from the
        target group is greater than 5% of all traffic.
      ActionsEnabled: false
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: ErrorPercent
          ReturnData: true
          Expression: (m1/m2)*100
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: HTTPCode_Target_5XX_Count
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt LoadBalancer.LoadBalancerFullName
            Period: 60
            Stat: Sum
        - Id: m2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: RequestCount
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt LoadBalancer.LoadBalancerFullName
            Period: 60
            Stat: Sum

Outputs:
  FrontUrl:
    Description: >-
      The API Gateway URL which KBV Front can be invoked on.
    Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
  FrontGatewayId:
    Description: KBV Front API Gateway ID
    Export:
      Name: !Sub "${AWS::StackName}-GatewayId"
    Value: !Ref ApiGwHttpEndpoint
  LoadBalancerArn:
    Description: The Fargate Front End Load Balancer ARN
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancer"
    Value: !Ref LoadBalancer
